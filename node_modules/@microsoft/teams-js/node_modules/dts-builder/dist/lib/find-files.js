"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
function findFiles(dir, match) {
    if (match === void 0) { match = /\.d\.ts$/; }
    if (!dir || typeof dir !== "string") {
        return Promise.reject("Invalid directory: " + dir);
    }
    if (!(match instanceof RegExp)) {
        return Promise.reject("Invalid match regexp: " + match);
    }
    return getMatches(dir, match);
}
exports.findFiles = findFiles;
/**
 * Iterate over directories and find all matching files (synchronous)
 */
function getMatches(dir, match) {
    return new Promise(function (resolve, reject) {
        var files = [];
        var dirs = [];
        // get list of current dir's files, and file by type
        fs.readdir(dir, function (err, curFiles) {
            if (err) {
                reject(err);
                return;
            }
            curFiles.sort()
                .forEach(function (file) {
                var path = dir + "/" + file;
                var stat = fs.statSync(path);
                if (!stat)
                    return;
                if (stat.isFile()) {
                    files.push(path);
                }
                else if (stat.isDirectory()) {
                    dirs.push(path);
                }
                else {
                    console.warn("DBG: Unknown file", stat);
                }
            });
            // save matched files
            var matches = files.filter(function (file) { return match.test(file); });
            // grab matches for sub-directories
            Promise.all(dirs.map(function (path) { return getMatches(path, match); }))
                .then(function (children) {
                if (children && children.length) {
                    matches = matches.concat.apply(matches, children);
                }
            })
                .then(function () {
                resolve(matches);
            });
        });
    });
}
//# sourceMappingURL=find-files.js.map