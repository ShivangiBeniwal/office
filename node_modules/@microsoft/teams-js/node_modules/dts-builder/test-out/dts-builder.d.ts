import dts = dtsBuilder;

declare module 'dtsBuilder' {
  export = dtsBuilder;
}

declare namespace dtsBuilder {
  
  /** Global options */
  export const DTSBuilderOptions: {
      verbose: boolean;
  };
  /**
   * Receives a list of Bundles and generates the d.ts file according
   * to bundle configuration.
   */
  export function generateBundles(bundles: Array<Bundle>): Promise<Array<string>>;
  
  export interface Bundle {
      /**
       * Bundle name. Used for d.ts filename and the wrapping namespace.
       * @type {string}
       */
      name: string;
      /**
       * Location in which to search for *.d.ts files
       * @type {string}
       */
      sourceDir: string;
      /**
       * Location in which to save the output, under the name: `${name}.d.ts`
       * @type {string}
       */
      destDir: string;
      /**
       * List of external d.ts files that will be copied to the destination
       * directory, and will be referenced from withing the main d.ts file
       * @type {Array<string>}
       */
      externals?: Array<string>;
      /**
       * Wrap resulting definitions in a namespace. Set to false if files are already wrapped
       * by namespaces.
       * Default: true
       * @type {boolean}
       */
      wrap?: boolean;
      /**
       * If specified, library will exported as the given value, as an alias together
       * with the original name.
       * @type {string}
       */
      alias?: string;
  }
  
  /// <reference types="node" />
  /**
   * @see http://stackoverflow.com/a/14387791
   */
  export function copyFile(source: string, target: string, cb: (err?: NodeJS.ErrnoException, target?: string) => any): void;
  
  export function findFiles(dir: string, match?: RegExp): Promise<Array<string>>;
  
  export function generateSingleBundle(bundle: Bundle): Promise<string>;
  
  /**
   * Logging helper
   */
  export function log(message: any, ...args: any[]): void;
  
  export const reference: RegExp;
  export const externalModule: RegExp;
  export const externalReExports: RegExp;
  export const internalModule: RegExp;
  export const internalInlineModule: RegExp;
  export const internalModuleParts: RegExp;
  export const defaultExport: RegExp;
  export const defaultsFromNs: RegExp;
  export const exportDeclarations: RegExp;
  
}